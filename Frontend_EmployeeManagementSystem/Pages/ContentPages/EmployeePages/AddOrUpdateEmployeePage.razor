@implements IDisposable
@if (allState.ShowEmployee)
{
    if (ShowAddOrUpdateEmployee)
    {
        <div class="container">
            <div class="row mt-5">
                <div class="col-lg-1 text-center">
                    <i class="bi bi-x-lg fs-3 fw-bold text-danger" style="cursor:pointer" @onclick="Closeform"></i>
                </div>
                <div class="col-lg-6 text-center"><h2>@Title nhân viên</h2> </div>
            </div>
            <div class="row">
                <div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
                    <div class="hstack">
                        @if (FirstLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@Floatingdiv2 format-border"></div>
                        }
                        @if (SecondLayer)
                        {
                            <div class="@FloatingNumber1 text-center">1</div>
                            <div class="@Floatingdiv1 format-border"></div>
                            <div class="@FloatingNumber2 text-center">2</div>
                            <div class="@Floatingdiv1 format-border"></div>
                        }
                    </div>
                </div>

                <div class="col-lg-12">
                    <div class="container-fluid">
                        @if (FirstLayer)
                        {
                            <EditForm Model="EmployeeGroup1" OnValidSubmit="Form1">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tomaho"> Thông tin cá nhân</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">Họ và tên</label>
                                                <InputText @bind-Value="EmployeeGroup1.Name" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.Name" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Số điện thoại</label>
                                                <InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.TelephoneNumber" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">Địa chỉ</label>
                                                <InputText @bind-Value="EmployeeGroup1.Address" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.Address" class="text-danger" />
                                            </div>
                                            <div class="form-control mt-2">
                                                <img src="@EmployeeGroup1.Photo" width="100" height="100"/>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tomaho"> Thông tin khác </div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label">Civil ID</label>
                                                <InputText @bind-Value="EmployeeGroup1.CivilId" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.CivilId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-2">
                                                <label class="form-label">File Number</label>
                                                <InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup1.FileNumber" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class=" form-label @(ImageUploadMessage == ""?"":"text-danger")">
                                                    @(ImageUploadMessage == "" ? "Upload Image" : ImageUploadMessage)
                                                </label>
                                                <InputFile class="form-control" OnChange="UpLoadImage"></InputFile>
                                                <ValidationMessage For="()=>EmployeeGroup1.Photo" class="text-danger"/>
                                            </div>
                                            <div class="form-group mt-5">
                                                <button class="btn btn-primary float-end mt-4 mb-5" type="submit">
                                                    <i class="bi bi-arrow-right"> Tiếp</i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }

                        @if (SecondLayer)
                        {
                            <EditForm Model="EmployeeGroup2" OnValidSubmit="Form2">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-lg-2"></div>
                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tomaho"> Thông tin công việc</div>
                                        <div class="card-body">
                                            <div class="form-group">
                                                <label class="form-label"> Tên công việc</label>
                                                <InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" />
                                                <ValidationMessage For="()=>EmployeeGroup2.JobName" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label"> </label>
                                                @{
                                                    string generalDepartmentName = GeneralDepartments.Equals("") ? "Tìm kiếm phòng ban tổng hợp" : GeneralDepartment ;
                                                }
                                                <label class="form-label"> Tìm kiếm phòng ban tổng hợp</label>
                                                <SfDropDownList TValue="string" TItem="GeneralDepartment" Placeholder="@generalDepartmentName" DataSource="GeneralDepartments">
                                                    <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                @{
                                                    string departmentName = Departments.Equals("") ? "Tìm kiếm phòng bộ phận" : Department;
                                                }
                                                <label class="form-label"> Tìm kiếm phòng bô phận</label>
                                                <SfDropDownList TValue="string" TItem="Department" Placeholder="@departmentName" DataSource="Departments">
                                                    <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                @{
                                                    string branchName = Branchs.Equals("") ? "Tìm kiếm nhánh" : Branch;
                                                }
                                                <label class="form-label"> Tìm kiếm nhánh</label>
                                                <SfDropDownList TValue="string" TItem="Branch" Placeholder="@branchName" DataSource="Branchs">
                                                    <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Branch " ValueChange="OnBranchValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                                <ValidationMessage For="()=>EmployeeGroup2.BranchId" class="text-danger" />
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-primary float-start" type="button" @onclick="PrevClicked">
                                                    <i class="bi bi-arrow-left"> Quay lại</i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-lg-4">
                                        <div class="card-title mb-5 fw-bold" style="font-family:Tomaho">Thông tin địa chỉ</div>
                                        <div class="card-body">
                                            <div class="form-group mt-3">
                                                <label class="form-label"> Tìm kiếm quốc gia</label>
                                                @{
                                                    string countryName = Countries.Equals("") ? "Tìm kiếm quốc gia" : Country;
                                                }
                                                <SfDropDownList TValue="string" TItem="Country" Placeholder="@countryName" DataSource="Countries">
                                                    <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label"> Tìm kiếm thành phố</label>
                                                @{
                                                    string cityName = Cities.Equals("") ? "Tìm kiếm thành phố" : City;

                                                }
                                                <SfDropDownList TValue="string" TItem="City" Placeholder="@cityName" DataSource="Cities">
                                                    <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                                                    <DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
                                                </SfDropDownList>
                                            </div>
                                            <div class="form-group mt-3">
                                                <label class="form-label">Khác</label>
                                                <textarea @bind="EmployeeGroup2.Other" placeholder="Không bắt buộc!!" class="form-control"></textarea>
                                            </div>
                                            <div class="form-group mt-4 mb-5">
                                                <button class="btn btn-success float-end" type="submit">
                                                    <i class="bi bi-save"> Lưu</i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2"></div>
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
}

<style>
    .floatingDiv {
    width: 500px;
    background: #228ada;
    height: 10px;
    }

    .floatingNumber {
    border-radius: 50%;
    color: white;
    background: #1d1858;
    width: 20px;
    height: 20px;
    }

    .inactive-span {
    border-radius: 50%;
    color: white;
    background: #1d1858;
    width: 20px;
    height: 20px;
    }
    .inactive-div{
    width: 500px;
    background: gray;
    height: 10px;
    }
    .format-border {
    border-radius: 20px;
    }
</style>

@code {

    [Parameter] public Employee Employee { get; set; } = new();

    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    [Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Branch> Branchs { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();

    string FloatingNumber1 = "floatingNumber";
    string Floatingdiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string Floatingdiv2 = "inactive-div";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;

    public string Title { get; set; } = "Thêm";
    public string GeneralDepartment { get; set; } = "";
    public string Department{ get; set; } = "";
    public string Branch { get; set; } = "";
    public string Country { get; set; } = "";
    public string City { get; set; } = "";  



    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
    }

    //Đóng Form
    [Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
    async Task Closeform()
    {
        ShowAddOrUpdateEmployee = false;
        await NotifyParentFormCloseClicked.InvokeAsync();
        ClearContent();
    }

    private void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
    }
    //File Upload
    string ImageUploadMessage = "";
    private async Task UpLoadImage(InputFileChangeEventArgs e){
        if(e.File.Name.ToLower().Contains(".jpg")){
            var format = "image/jpg";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}"; 
            ImageUploadMessage = "";
            EmployeeGroup1.Photo = imageData;
            imageData = "";
            return;
        }
        ImageUploadMessage = "File không hợp lệ";
        return;
    }

    //Form xác nhận
    //Form 1
    private bool ValidateEmployeeGroup1()
    {
        if(string.IsNullOrEmpty(EmployeeGroup1.Name)
            || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber) 
            || string.IsNullOrEmpty( EmployeeGroup1.FileNumber)
            || string.IsNullOrEmpty(EmployeeGroup1.Address)
            || string.IsNullOrEmpty(EmployeeGroup1.Photo)
            || string.IsNullOrEmpty(EmployeeGroup1.CivilId)){
            return false;
        }
        else{
            return true;
        }
    }

    //Form 2
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName)
            || EmployeeGroup2.CityId == 0
            || EmployeeGroup2.BranchId == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    //Lưu Form
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeEvent { get; set; }
    private void Form1()
    {
        if (ValidateEmployeeGroup1())
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();
        }
    }

    private async Task Form2()
    {
        if (ValidateEmployeeGroup2())
        {
            Employee.Jobname = EmployeeGroup2.JobName;
            Employee.Other = EmployeeGroup2.Other;
            Employee.CityId = EmployeeGroup2.CityId;
            Employee.BranchId = EmployeeGroup2.BranchId;

            await HandleSaveEmployeeEvent.InvokeAsync(Employee);

            // Đợi 3 giây rồi đóng form và reset dữ liệu
            await Task.Delay(3000);
            await Closeform();
        }
    }
    public void ClearContent(){
        Employee = new Employee();
        EmployeeGroup1 = new EmployeeGrouping1();
        EmployeeGroup2 = new EmployeeGrouping2(); 
        FirstLayer = true;
        SecondLayer = false;
        StateHasChanged();

    }
    
    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged;
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }

    //Country
    [Parameter] public EventCallback<int> HandleCountrySelectedEvent { get; set; }
    public void OnCountryValueChange(ChangeEventArgs<string, Country> args)
    {
        if (int.TryParse(args.Value, out int countryId))
        {
            HandleCountrySelectedEvent.InvokeAsync(int.Parse(args.Value));
        }
    }
    
    //City
    public void OnCityValueChange(ChangeEventArgs<string, City> args)
    {
        EmployeeGroup2.CityId = int.Parse(args.Value);
    }

    //GeneralDepartment
    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    public void OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args)
    {
        if (int.TryParse(args.Value, out int countryId))
        {
            HandleGeneralDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));
        }
    }

    //Department
    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    public void OnDepartmentValueChange(ChangeEventArgs<string, Department> args)
    {
        if (int.TryParse(args.Value, out int countryId))
        {
            HandleDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));
        }
    }

    //Branch
    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args)
    {
        EmployeeGroup2.BranchId = int.Parse(args.Value);
    }
}
